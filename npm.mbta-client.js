(self.webpackChunkcharlie=self.webpackChunkcharlie||[]).push([[533],{2050:(e,t,s)=>{const r=s(5976);e.exports=r},9613:e=>{e.exports={Attributes:{arrival_time:"arrival_time",departure_time:"departure_time"},Pagination:{first:"first",next:"next",prev:"prev",last:"last"}}},7581:(e,t,s)=>{const r=s(9669);e.exports=async(e,t=r,s=console)=>{try{const s=await t.get(e);if(!s||!s.data)throw new Error("No data from MBTA");return s.data}catch(e){const{response:t}=e;if(t&&t.data&&t.data.errors){const[e]=t.data.errors;throw s.error(`Error ${e.status||e.code} fetching MBTA data: ${e.detail||"(no details)"}`),e}throw s.error("Error fetching MBTA data:",e.message),e}}},5976:(e,t,s)=>{const{buildUrl:r,arrivalsWithConversion:i,departuresWithConversion:n}=s(7159),{selectPage:a,selectIncluded:o}=s(6896),c=s(7581),{Pagination:l}=s(9613);e.exports=class{constructor(e,t=c,s=console){this.apiKey=e,this.fetch=t,this.logger=s,this.fetchStops=this._fetch("/stops"),this.fetchTrips=this._fetch("/trips"),this.fetchLines=this._fetch("/lines"),this.fetchAlerts=this._fetch("/alerts"),this.fetchShapes=this._fetch("/shapes"),this.fetchRoutes=this._fetch("/routes"),this.fetchServices=this._fetch("/services"),this.fetchVehicles=this._fetch("/vehicles"),this.fetchSchedules=this._fetch("/schedules"),this.fetchFacilities=this._fetch("/facilities"),this.fetchPredictions=this._fetch("/predictions"),this.fetchRoutePatterns=this._fetch("/route_patterns"),this.fetchLiveFacilities=this._fetch("/live_facilities")}_fetch(e){return t=>this.fetch(r(e,t,this.apiKey,this.logger))}async fetchAllRoutes(e){return(await this.fetchRoutes(e)).data.map((e=>{const{short_name:t}=e.attributes;return{...t&&t!==e.id?{short_name:t}:{},id:e.id,long_name:e.attributes.long_name,direction_names:e.attributes.direction_names}}))}async fetchStopsByRoute(e){return(await this.fetchStops({route:e})).data.map((e=>({name:e.attributes.name,id:e.id})))}async fetchStopsByName(e,{exact:t}={}){const s=await this.fetchStops(),r=e.trim().toLowerCase();return s.data.filter((e=>t?e.attributes.name.toLowerCase()===r:e.attributes.name.toLowerCase().match(r)))}selectArrivals(e,{convertTo:t,now:s}={}){return i({response:e,convertTo:t,now:s})}selectDepartures(e,{convertTo:t,now:s}={}){return n({response:e,convertTo:t,now:s})}selectIncluded(e,t){return o(e,t)}async fetchFirstPage(e){return this.fetch(a(l.first,e))}async fetchNextPage(e){return this.fetch(a(l.next,e))}async fetchPrevPage(e){return this.fetch(a(l.prev,e))}async fetchLastPage(e){return this.fetch(a(l.last,e))}}},6896:(e,t,s)=>{const{Attributes:r}=s(9613),i=e=>t=>t&&t.data?t.data.map((t=>t.attributes[e])):(console.warn("No response data..."),[]),n=i(r.arrival_time),a=i(r.departure_time);e.exports={selectPage:(e,t)=>(e=>{if(!e)throw new Error("No response, fetch data before accessing this value");if(!e.links)throw new Error('response.links does not exist, "limit" must be in fetch options');return e.links})(t)[e],selectIncluded:(e,t)=>{if(!e)throw new Error("included() requires an MBTA response as an argument");return e.included?e.included.filter((e=>Array.isArray(t)?t.includes(e.type):t===e.type||null==t)):(console.warn('response.included does not exist, "include" must be in fetch options'),[])},selectArrivalISOs:n,selectDepartureISOs:a}},7159:(e,t,s)=>{const{selectArrivalISOs:r,selectDepartureISOs:i}=s(6896),n=e=>null!=e&&""!==e,a=e=>Array.isArray(e)&&!e.filter(Boolean).length,o=(e,t)=>{if(!n(t))return e;const s={"hours|hrs":36e5,"minutes|mins":6e4,"seconds|secs":1e3,"ms|milliseconds":1},r=Object.keys(s).find((e=>new RegExp(t,"i").test(e)));if(!n(r))throw new Error(`Invalid 'convertTo' value: ${t}`);return e/s[r]},c=e=>t=>{const{response:s,max:r,convertTo:i,now:n=Date.now()}=t;return e(s).slice(0,r).map((e=>{if(null==i||null==e)return e;const t=new Date(e).valueOf()-n,s=Math.floor(o(t,i));return s>=0?s:0}))},l=c(r),h=c(i),u=e=>new Date(e).toISOString(),d=e=>{const t=Number(e);if(!n(e)||t>=7||t<0)return console.warn(`Invalid type: ${e}`),null;if(t==t)return t.toString();const s={tram:0,"light rail":0,streetcar:0,trolley:0,subway:1,metro:1,train:1,rail:2,commuter:2,"commuter rail":2,bus:3,autobus:3,ferry:4,boat:4,"cable car":5,gondola:6,"suspended cable car":6,funicular:7}[e.toLowerCase()];return n(s)?s.toString():null},f=(e,t,s)=>{if(!n(t))return s.warn("API key is missing. Keys available at https://api-v3.mbta.com"),`${e}`;const r=e.includes("?")?"&":"?";return`${e}${r}api_key=${t}`};e.exports={exists:n,buildUrl:function(e,t,s,r=console){const i="https://api-v3.mbta.com"+e;if(!e)throw new Error("Please provide an endpoint. See https://api-v3.mbta.com/docs/swagger/index.html");if(!t||!Object.keys(t).length)return f(i,s,r);!function(e,t){const{limit:s,offset:r,latitude:i,longitude:a,descending:o,min_time:c,max_time:l,radius:h,route:u,stop:d,sort:f,trip:p}=t,m=t=>t===e;!m("/predictions")&&!m("/schedules")||n(d)||n(p)||n(u)||console.warn('Please include "stop", "trip", or "route"'),m("/shapes")&&!n(u)&&console.warn('Shape requires a "route" param'),n(r)&&!n(s)&&console.warn('"offset" will have no effect without "limit"'),(n(i)&&!n(a)||!n(i)&&n(a))&&console.warn("Latitude and longitude must both be present"),!n(h)||n(i)&&n(a)||console.warn("Radius requires latitude and longitude"),n(o)&&!n(f)&&console.warn('"descending" has no effect without "sort"'),[c,l].forEach((e=>{n(e)&&!/^\d{2}:\d{2}/.test(e)&&console.warn("min_time and max_time format should be HH:MM")}))}(e,t);const o=Object.entries(t).map((([e,s])=>{let r;switch(e){case"sort":return t.descending?`sort=-${s}`:`sort=${s}`;case"limit":case"offset":return`page[${e}]=${s}`;case"date":r=[].concat(s).map(u);break;case"route_type":case"type":r=[].concat(s).map(d);break;default:r=s}return!n(r)||a(r)?null:`${e}=${(e=>[].concat(e).filter(Boolean).join(",").replace(/,\s/g,","))(r)}`})).filter((e=>!!e&&!/descending/.test(e))).join("&");return f(`${i}?${o}`,s,r)},isoRegex:/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}).000Z/,convertMs:o,convertTimes:c,isEmptyArray:a,normalizeType:d,normalizeDate:u,arrivalsWithConversion:l,departuresWithConversion:h}}}]);